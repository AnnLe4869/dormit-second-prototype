import { CollectionReference } from "firebase-admin/firestore";
import * as functions from "firebase-functions";
import config from "../config";
import { verifyEmail } from "../helper/helper";

import { db, totp } from "../setup";

/**
 * Send a verification code to the email provided
 * This DOES NOT check whether the email existed in the codebase
 * nor it check whether the email actually exists or not
 *
 * Params for the functions
 * @param {email: string}
 */
export const sendCodeViaEmail = functions
  .runWith({
    // allows the function to use environment secret OTP_SECRET
    secrets: ["OTP_SECRET"],
    // no more than 20 instances of the function should be running at once.
    // More on https://cloud.google.com/functions/docs/configuring/max-instances
    maxInstances: 20,
  })
  .https.onCall(async (data) => {
    if (!data.email) {
      throw new functions.https.HttpsError(
        "invalid-argument",
        `The function must be called with one argument "email" containing the email to send the code to.`
      );
    }

    const email: string = data.email;
    if (!verifyEmail(email)) {
      throw new functions.https.HttpsError(
        "invalid-argument",
        `The value ${email} doesn't seem to be a valid email.`
      );
    }
    /**
     * the secret is generated by concatenating the secret and user's provided email
     * we do that as a "salting" to the secret
     */
    const secret = config.otpSecret + email;
    const code = totp.generate(secret);

    /**
     * send token to the email address
     * we use firebase extension to send email
     * Extension https://firebase.google.com/products/extensions/firebase-firestore-send-email
     */

    const emailsRef = db.collection("emails") as CollectionReference<{
      to: string;
      message: {
        subject: string;
        html: string;
      };
    }>;
    try {
      await emailsRef.add({
        to: email,
        message: {
          subject: "Hello from Firebase!",
          html: `This is your verification code ${code}. It will expire in 15 minutes`,
        },
      });
      return {
        isSuccess: true,
        message: "A code has been sent to your email",
      };
    } catch (err) {
      functions.logger.error(
        `Error: Cannot send email to email ${email}`,
        (err as Error).message
      );
      throw new functions.https.HttpsError("internal", `Something went wrong`);
    }
  });
